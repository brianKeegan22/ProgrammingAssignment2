makeCacheMatrix <- function(x = matrix()) {
k <- NULL
set <- function(y){
x <<- y
k <<- NULL
}
get <- function()x
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
k <- x$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
mat <- x$get()
k <- solve(mat,...)
x$setInverse(k)
k
}
makeCacheMatrix <- function(x = matrix()) {
k <- NULL
set <- function(y){
x <<- y
k <<- NULL
}
get <- function()x
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
k <- x$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
mat <- x$get()
k <- solve(mat,...)
x$setInverse(k)
k
}
makeCacheMatrix <- function(x = matrix()) {
k <- NULL
set <- function(y){
x <<- y
k <<- NULL
}
get <- function()x
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
k <- x$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
data <- x$get()
k <- solve(data,...)
x$setInverse(k)
k
}
##This script shows how variables can be stored in cache and we can do a check to see if already in cache to save computing time
##makeCacheMatrix function allows us to create a matrix that can be inverted and stored in cache
makeCacheMatrix <- function(x = matrix()) {
k <- NULL
set <- function(y){
x <<- y
k <<- NULL
}
get <- function()x
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##cacheSolve function inverts the matrix x if not already stored in cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
k <- x$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
data <- x$get()
k <- solve(data,...)
x$setInverse(k)
k
}
##This script shows how variables can be stored in cache and we can do a check to see if already in cache to save computing time
##makeCacheMatrix function allows us to create a matrix that can be inverted and stored in cache
makeCacheMatrix <- function(x = matrix()) {
k <- NULL
set <- function(y){
x <<- y
k <<- NULL
}
get <- function()x
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##cacheSolve function inverts the matrix x if not already stored in cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
k <- x$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
data <- x$get()
k <- solve(data,...)
x$setInverse(k)
k
}
